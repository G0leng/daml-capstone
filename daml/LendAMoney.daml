module LendAMoney where

import DA.Date

type LoanAccountId = ContractId LoanAccount
type LoanAccountKey = (Party, Party)

data BorrowerDetails = BorrowerDetails
    with
        name : Text
        address : Text
        mobile_number : Text
        email : Text
        marital_status : Optional Text
        monthly_salary : Decimal
        job_status : Text
        company_name : Text
    deriving (Show, Eq)

template LoanAccount
    with
        lender : Party
        borrower : Party
        loan_amount : Decimal
        interest : Decimal
        balance : Decimal
        term : Int
        monthly_installment : Decimal
        
        loan_status : Text
        details : BorrowerDetails
    where
        signatory lender, borrower
        ensure lender /= borrower

        key (lender, borrower) : LoanAccountKey
        maintainer key._1

        nonconsuming choice GetBorrowerDetails : BorrowerDetails
            controller lender
            do
                return(details)
        choice Borrow : LoanAccountId
            with
                amount : Decimal
            controller borrower
            do
                assertMsg "Exceeds the loanable amount." ( balance > details.monthly_salary )
                time <- getTime
                let newDateTime = toDateUTC time
                create Transactions with payment = amount, balance = balance + amount, timestamp = newDateTime, ..
                create LoanAccount with balance = balance + amount, ..         
        choice Pay: LoanAccountId
            with
                amount : Decimal
            controller borrower
            do 
                assertMsg "Invalid payment" (amount > 0.0)
                time <- getTime
                let newDateTime = toDateUTC time
                create Transactions with payment = amount, balance = balance - amount, timestamp = newDateTime, ..
                create LoanAccount with balance = balance - amount, ..         
template ApplyLoan
    with
        borrower : Party
        lender : Party
        details : BorrowerDetails
        loan_amount : Decimal
        --term : enum ???
        term : Int
        --interest rate : enum ??
    where
        observer lender
        signatory borrower
        ensure loan_amount > 0.0
        choice ApproveLoan : LoanAccountId
            with
                loan_status : Text
            controller lender
            do
                time <-getTime
                let newDateTime = toDateUTC time
                --change 0.025 to interest rate enum
                let interest_amount = loan_amount * 0.025
                let loan_amount_with_interest = (loan_amount + interest_amount ) 
                
                let monthly_payment_required = loan_amount_with_interest /(intToDecimal)term
                debug $ monthly_payment_required

                create Transactions with payment = 0.0, balance = loan_amount_with_interest, timestamp = newDateTime, ..
                create LoanAccount with loan_amount = loan_amount, interest = interest_amount, balance = loan_amount_with_interest, monthly_installment = monthly_payment_required, term = term, ..
        choice RejectLoan : ContractId RejectedLoan
            with
                loan_status : Text
                reason : Text
            controller lender
            do
                create RejectedLoan with ..

template RejectedLoan
    with
        borrower : Party
        lender : Party
        loan_status : Text
        reason : Text
        details : BorrowerDetails
    where
        signatory borrower, lender
        choice ReapplyLoan : ContractId ApplyLoan
            with
                loan_amount : Decimal
                term : Int
            controller borrower
            do
                --change 0.025 to interest rate enum
                let monthly_payment_required = (loan_amount * 0.025)/(intToDecimal)term
                create ApplyLoan with ..    

template Transactions
    with
        timestamp : Date
        lender : Party
        borrower : Party
        payment : Decimal
        balance : Decimal
    where
        ensure lender /= borrower
        signatory lender, borrower

